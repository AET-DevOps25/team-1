name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Image name and tag"
        required: false

jobs:
  unit-test:
    if: ${{ github.event.inputs.image == '' || github.event.inputs.image == null }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4.4.1

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Make protobuf executable
        run: chmod +x service-application/protoc-gen-grpc-java-1.73.0-linux-x86_64.exe

      - name: Run tests for all modules
        run: ./gradlew test

  build-and-push:
    needs: unit-test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Generate .env with proper tag
        run: |
          echo "GHCR_USER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" > .env
          echo "GHCR_REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> .env
          echo "GHCR_TAG=aws-${{ github.sha }}" >> .env
          echo "VITE_API_BASE_URL='${{ vars.EC2_PUBLIC_IP }}'" >> .env

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all images via docker compose
        run: docker compose -f docker-compose.prod.yml build

      - name: Push all images via docker compose
        run: docker compose -f docker-compose.prod.yml push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # SCP - docker-compose.prod.deploy.yml - server
      - name: Upload docker-compose.prod.deploy.yml to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./docker-compose.prod.deploy.yml"
          target: ~/srv/app/

      # remote generate .env
      - name: Create .env on remote server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cat > ~/srv/app/.env <<EOF
            # GitHub Container Registry
            GHCR_USER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')
            GHCR_REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')
            GHCR_TAG=$(
            if [[ -n "${{ github.event.inputs.image }}" ]]; then
              echo "${{ github.event.inputs.image }}"
            else
              echo "aws-${{ github.sha }}"
            fi
            )
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=5432
            DB_HOST=postgresql
            JWT_PRIVATE_KEY="${{ secrets.JWT_PRIVATE_KEY }}"
            JWT_PUBLIC_KEY="${{ secrets.JWT_PUBLIC_KEY }}"
            CORS_ALLOWED_ORIGINS=${{ vars.CORS_ALLOWED_ORIGINS }}
            AUTH_SERVER_PORT=8080
            JOB_SERVER_PORT=8081
            APPLICATION_SERVER_PORT=8082
            ASSESS_SERVER_PORT=8083
            GENAI_SERVER_PORT=8079
            SPRING_PROFILES_ACTIVE=docker
            PYTHONDONTWRITEBYTECODE=1
            PYTHONUNBUFFERED=1
            OLLAMA_BASE_URL="${{ secrets.OLLAMA_BASE_URL }}"
            OLLAMA_MODEL="${{ vars.OLLAMA_MODEL }}"
            OLLAMA_API_KEY="${{ secrets.OLLAMA_API_KEY }}"
            EOF

      # SSH - pull images and restart containers
      - name: Pull images and restart containers remotely
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ secrets.AWS_EC2_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/srv/app
            docker compose -f docker-compose.prod.deploy.yml pull
            docker compose -f docker-compose.prod.deploy.yml up -d