name: Build and Publish and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    # 如果输入image tag，就跳过build
    inputs:
      image:
        description: "Image name and tag"
        required: false

jobs:
  build-and-push:
    if: ${{ github.event.inputs.image == '' || github.event.inputs.image == null }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Generate .env with proper tag
        run: |
          echo "GHCR_USER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" > .env
          echo "GHCR_REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> .env
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "GHCR_TAG=${{ github.sha }}" >> .env
          else
            echo "GHCR_TAG=dev-${{ github.sha }}" >> .env
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all images via docker compose
        run: docker compose -f docker-compose.prod.yml build

      - name: Push all images via docker compose
        run: docker compose -f docker-compose.prod.yml push

  deploy-k8s:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'k8s' || 'k8s-dev' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://ai-hr.student.k8s.aet.cit.tum.de' || 'https://ai-hr-dev.student.k8s.aet.cit.tum.de' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_AIHR }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - uses: azure/setup-kubectl@v4
        with: { version: 'v1.30.0' }
      - uses: azure/setup-helm@v4
        with: { version: 'v3.14.0' }

      - name: Calc stage / ns
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "GHCR_USER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "GHCR_REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "IMAGE_TAG=${GITHUB_SHA}"       >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=dev-${GITHUB_SHA}"   >> $GITHUB_ENV
          fi
          if [[ "$BRANCH" == "main" ]]; then
            echo "stage=prod"  >>$GITHUB_OUTPUT
            echo "ns=ai-hr"    >>$GITHUB_OUTPUT
            echo "release=ai-hr-prod"      >>$GITHUB_OUTPUT
          else
            echo "stage=dev"    >>$GITHUB_OUTPUT
            echo "ns=ai-hr-dev" >>$GITHUB_OUTPUT
            echo "release=ai-hr-dev"       >>$GITHUB_OUTPUT
          fi
          echo "OLLAMA_MODEL=${{ vars.OLLAMA_MODEL }}" >> $GITHUB_ENV

      - name: Write JWT keys
        run: |
          echo "${{ secrets.JWT_PRIV_KEY }}" > priv.pem
          echo "${{ secrets.JWT_PUB_KEY }}"  > pub.pem

      - name: Helm dependency update
        run: helm dependency update ./helm/aihr

      - name: unzip tgz files inside helm
        run: |
          cd helm/aihr/charts/
          tar -xvzf grafana-7.3.12.tgz
          rm grafana-7.3.12.tgz

      - name: Copy dashboard json
        run: |
          cp -r ./dashboards/* ./helm/aihr/charts/grafana/dashboards/

      - name: Helm deploy
        run: |
          helm upgrade --install ${{ steps.vars.outputs.release }} ./helm/aihr \
            --namespace ${{ steps.vars.outputs.ns }} --create-namespace \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-prometheus.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-grafana.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-frontend.yaml \
            -f helm/aihr/values-common-prometheus.yaml \
            -f helm/aihr/values-common-grafana.yaml \
            -f helm/aihr/values-common-discord-alert.yaml \
            -f helm/aihr/values-common-loki.yaml \
            --set discordWebhook.url=${{ secrets.DISCORD_WEBHOOK }} \
            --set global.ghcrUser=${{ env.GHCR_USER }} \
            --set global.ghcrRepo=${{ env.GHCR_REPO }} \
            --set global.imageTag=${{ env.IMAGE_TAG }} \
            --set-file global.jwt.privateKey=priv.pem \
            --set-file global.jwt.publicKey=pub.pem \
            --set global.ollama.ollamaBaseUrl=${{ secrets.OLLAMA_BASE_URL }} \
            --set global.ollama.ollamaModel=${{ env.OLLAMA_MODEL }} \
            --set global.ollama.ollamaApiKey=${{ secrets.OLLAMA_API_KEY }} \
            --wait --timeout 15m

  deploy-k8s-direcct:
    if: ${{ github.event.inputs.image != '' && github.event.inputs.image != null }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'k8s' || 'k8s-dev' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://ai-hr.student.k8s.aet.cit.tum.de' || 'https://ai-hr-dev.student.k8s.aet.cit.tum.de' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_AIHR }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - uses: azure/setup-kubectl@v4
        with: { version: 'v1.30.0' }
      - uses: azure/setup-helm@v4
        with: { version: 'v3.14.0' }

      - name: Calc stage / ns
        id: vars
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "GHCR_USER=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "GHCR_REPO=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          if [[ -n "${{ github.event.inputs.image }}" ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=latest"   >> $GITHUB_ENV
          fi
          if [[ "$BRANCH" == "main" ]]; then
            echo "stage=prod"  >>$GITHUB_OUTPUT
            echo "ns=ai-hr"    >>$GITHUB_OUTPUT
            echo "release=ai-hr-prod"      >>$GITHUB_OUTPUT
          else
            echo "stage=dev"    >>$GITHUB_OUTPUT
            echo "ns=ai-hr-dev" >>$GITHUB_OUTPUT
            echo "release=ai-hr-dev"       >>$GITHUB_OUTPUT
          fi
          echo "OLLAMA_MODEL=${{ vars.OLLAMA_MODEL }}" >> $GITHUB_ENV

      - name: Write JWT keys
        run: |
          echo "${{ secrets.JWT_PRIV_KEY }}" > priv.pem
          echo "${{ secrets.JWT_PUB_KEY }}"  > pub.pem

      - name: Helm dependency update
        run: helm dependency update ./helm/aihr

      - name: unzip tgz files inside helm
        run: |
          cd helm/aihr/charts/
          tar -xvzf grafana-7.3.12.tgz
          rm grafana-7.3.12.tgz

      - name: Copy dashboard json
        run: |
          cp -r ./dashboards/* ./helm/aihr/charts/grafana/dashboards/

      - name: Helm deploy
        run: |
          helm upgrade --install ${{ steps.vars.outputs.release }} ./helm/aihr \
            --namespace ${{ steps.vars.outputs.ns }} --create-namespace \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-prometheus.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-grafana.yaml \
            -f helm/aihr/values-${{ steps.vars.outputs.stage }}-frontend.yaml \
            -f helm/aihr/values-common-prometheus.yaml \
            -f helm/aihr/values-common-grafana.yaml \
            -f helm/aihr/values-common-discord-alert.yaml \
            -f helm/aihr/values-common-loki.yaml \
            --set discordWebhook.url=${{ secrets.DISCORD_WEBHOOK }} \
            --set global.ghcrUser=${{ env.GHCR_USER }} \
            --set global.ghcrRepo=${{ env.GHCR_REPO }} \
            --set global.imageTag=${{ env.IMAGE_TAG }} \
            --set-file global.jwt.privateKey=priv.pem \
            --set-file global.jwt.publicKey=pub.pem \
            --set charts.service-genai.env.ollamaBaseUrl=${{ secrets.OLLAMA_BASE_URL }} \
            --set charts.service-genai.env.ollamaModel=${{ env.OLLAMA_MODEL }} \
            --set charts.service-genai.env.ollamaApiKey=${{ secrets.OLLAMA_API_KEY }} \
            --wait --timeout 15m