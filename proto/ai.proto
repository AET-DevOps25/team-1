syntax = "proto3";

package ai;

option java_package = "de.tum.devops.grpc.ai";
option java_outer_classname = "AIServiceProto";
option java_multiple_files = true;

// Represents a single chat message exchanged between AI and candidate
message ChatMessage {
  enum Sender {
    SENDER_UNSPECIFIED = 0;
    SENDER_AI = 1;
    SENDER_CANDIDATE = 2;
  }

  Sender sender = 1;
  string content = 2;
}

// --------------------------- ChatReply ---------------------------
message ChatReplyRequest {
  string resume_text = 1;
  string job_title = 2;
  string job_description = 3;
  string job_requirements = 4;
  repeated ChatMessage chat_history = 5;
}

message ChatReplyResponse {
  string ai_message = 1;
}

// --------------------------- QA ---------------------------
message NormalQARequest {
  string question = 1;
  bool is_open_rag = 2;
}

// --------------------------- ScoreResume ---------------------------
message ScoreResumeRequest {
  string job_title = 1;
  string job_description = 2;
  string job_requirements = 3;
  string resume_text = 4;
}

message ScoreResumeResponse {
  double resume_score = 1;
  string comment = 2;
  RecommendationEnum recommendation = 3;
}

// --------------------------- ScoreInterview ---------------------------
message ScoreInterviewRequest {
  string job_title = 1;
  string job_description = 2;
  string job_requirements = 3;
  repeated ChatMessage chat_history = 4;
}

message ScoreInterviewResponse {
  double interview_score = 1;
  string comment = 2;
  RecommendationEnum recommendation = 3;
}

// Recommendation enum to indicate overall suggestion based on scores
enum RecommendationEnum {
  RECOMMEND = 0;
  CONSIDER = 1;
  NOT_RECOMMEND = 2;
}

// --------------------------- AI Service ---------------------------
service AIService {
  // Streamed chat with AI assistant. Server streams incremental ai_message tokens.
  rpc ChatReply(ChatReplyRequest) returns (stream ChatReplyResponse);

  // Streamed chat with AI, normal QA
  rpc NormalQA(NormalQARequest) returns (stream ChatReplyResponse);

  // Scores a resume against job requirements.
  rpc ScoreResume(ScoreResumeRequest) returns (ScoreResumeResponse);

  // Scores an interview chat against resume and job requirements.
  rpc ScoreInterview(ScoreInterviewRequest) returns (ScoreInterviewResponse);
}