openapi: 3.0.3

info:
  title: AI-HR Recruitment Platform – Public & Internal HTTP API
  version: "2.2.0"
  description: >
    This single file describes **external** (JWT-protected) and **internal**
    (cluster-only, no-auth) REST endpoints.

servers:
  # external gateway (Traefik / Ingress)
  - url: https://api.ai-hr.student.k8s.aet.cit.tum.de/api/v1
    description: External – production
  - url: http://api.ai-hr-dev.student.k8s.aet.cit.tum.de/api/v1
    description: External – dev
  # internal ClusterIP services (plain HTTP; traffic stays inside the cluster)
  - url: http://user-service/internal/api/v1
    description: Internal – user-service
  - url: http://job-service/internal/api/v1
    description: Internal – job-service
  - url: http://application-service/internal/api/v1
    description: Internal – application-service

tags:
  - name: Auth
  - name: Jobs
  - name: Applications
  - name: Chat
  - name: Internal-User
  - name: Internal-Job
  - name: Internal-Application

# ─────────────────────────────────────────────────────────────
components:
  # ── security ───────────────────────────────────────────────
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: RSA-signed, stateless (no refresh / blacklist)

  # ── reusable response envelope ─────────────────────────────
  schemas:
    ApiResponse:
      type: object
      required: [ success, message, timestamp, code ]
      properties:
        success: { type: boolean }
        message: { type: string }
        data: { nullable: true }
        timestamp: { type: string, format: date-time }
        code: { type: integer }

    ErrorResponse:
      allOf:
        - $ref: "#/components/schemas/ApiResponse"
        - type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  field: { type: string }
                  message: { type: string }

    PageInfo:
      type: object
      properties:
        page: { type: integer, minimum: 0 }
        size: { type: integer, minimum: 1, maximum: 100 }
        total: { type: integer }
        totalPages: { type: integer }

    # ── domain DTOs (abbreviated) ──────────────────────────────
    UserDto:
      type: object
      properties:
        userID: { type: string, format: uuid }
        fullName: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [ CANDIDATE, HR ] }
        createdAt: { type: string, format: date-time }

    JobDto:
      type: object
      properties:
        jobID: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        requirements: { type: string }
        status: { type: string, enum: [ OPEN, CLOSED, DRAFT ] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    ApplicationDto:
      type: object
      properties:
        applicationID: { type: string, format: uuid }
        jobID: { type: string, format: uuid }
        candidateID: { type: string, format: uuid }
        status:
          type: string
          enum:
            [
              SUBMITTED,
              AI_SCREENING,
              AI_INTERVIEW,
              COMPLETED,
              SHORTLISTED,
              REJECTED,
              HIRED,
            ]
        resumeText: { type: string }
        resumeFilePath: { type: string }
        hrDecision: { type: string, enum: [ SHORTLISTED, REJECTED, HIRED ] }
        hrComments: { type: string }
        chatStatus: { type: string, enum: [ ACTIVE, COMPLETE ] }
        submittedAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    AssessmentDto:
      type: object
      properties:
        resumeScore: { type: number }
        interviewScore: { type: number }
        recommendation: { type: string }

    ChatMessageDto:
      type: object
      properties:
        messageID: { type: string, format: uuid }
        sessionID: { type: string, format: uuid }
        sender: { type: string, enum: [ AI, CANDIDATE ] }
        content: { type: string }
        sentAt: { type: string, format: date-time }

    # ── request bodies (minimal) ───────────────────────────────
    LoginRequest:
      type: object
      required: [ email, password ]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    RegisterRequest:
      type: object
      required: [ fullName, email, password ]
      properties:
        fullName: { type: string }
        email: { type: string, format: email }
        password: { type: string }

    CreateJobRequest:
      type: object
      required: [ title, description, requirements ]
      properties:
        title: { type: string }
        description: { type: string }
        requirements: { type: string }

    UpdateJobRequest:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        requirements: { type: string }
        status: { type: string, enum: [ OPEN, CLOSED, DRAFT ] }

    CreateApplicationRequest:
      type: object
      required: [ jobID, resumeText ]
      properties:
        jobID: { type: string, format: uuid }
        resumeText: { type: string }
        resumeFile: { type: string, format: binary }

    UpdateApplicationRequest:
      type: object
      required: [ hrDecision ]
      properties:
        hrDecision: { type: string, enum: [ SHORTLISTED, REJECTED, HIRED ] }
        hrComments: { type: string }

    SendChatMessageRequest:
      type: object
      required: [ content ]
      properties:
        content: { type: string }

# ─────────────────────────────────────────────────────────────
security:
  - BearerAuth: [ ]

# ─────────────────────────────────────────────────────────────
paths:
  # ========== AUTH (external) ==========
  /auth/login:
    post:
      tags: [ Auth ]
      security: [ ] # public
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /auth/register:
    post:
      tags: [ Auth ]
      security: [ ] # public
      summary: Candidate registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /auth/hr-register:
    post:
      tags: [ Auth ]
      summary: HR registers another HR
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: HR created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ========== USER SERVICE (internal) ==========
  /internal/api/v1/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema: { type: string, format: uuid }
    get:
      tags: [ Internal-User ]
      security: [ ] # no JWT
      summary: Get user by ID (internal)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ========== JOB SERVICE (external) ==========
  /jobs:
    get:
      tags: [ Jobs ]
      summary: Public job list
      parameters:
        - {
          name: page,
          in: query,
          schema: { type: integer, minimum: 0, default: 0 },
        }
        - {
          name: size,
          in: query,
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 },
        }
        - {
          name: status,
          in: query,
          schema: { type: string, enum: [ OPEN, CLOSED, DRAFT ] },
        }
      responses:
        "200":
          description: Job list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    post:
      tags: [ Jobs ]
      summary: Create job (HR)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateJobRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /jobs/{jobId}:
    parameters:
      - {
        name: jobId,
        in: path,
        required: true,
        schema: { type: string, format: uuid },
      }

    get:
      tags: [ Jobs ]
      summary: Job details
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    patch:
      tags: [ Jobs ]
      summary: Update job (HR)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateJobRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    delete:
      tags: [ Jobs ]
      summary: Delete job (HR)
      responses:
        "204":
          description: Deleted

  /jobs/{jobId}/close:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags: [ Jobs ]
      summary: Close job
      responses:
        "200":
          description: Closed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /jobs/{jobId}/open:
    parameters:
      - name: jobId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags: [ Jobs ]
      summary: Re-open job
      responses:
        "200":
          description: Opened
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ========== JOB SERVICE (internal) ==========
  /internal/api/v1/jobs/{jobId}:
    parameters:
      - {
        name: jobId,
        in: path,
        required: true,
        schema: { type: string, format: uuid },
      }
    get:
      tags: [ Internal-Job ]
      security: [ ]
      summary: Get job by ID (internal)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ========== APPLICATION SERVICE (external) ==========
  /applications:
    post:
      tags: [ Applications ]
      summary: Apply to a job
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateApplicationRequest"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    get:
      tags: [ Applications ]
      summary: List applications (candidate / HR)
      parameters:
        - { name: jobId, in: query, schema: { type: string, format: uuid } }
        - { name: status, in: query, schema: { type: string } }
        - {
          name: page,
          in: query,
          schema: { type: integer, minimum: 0, default: 0 },
        }
        - {
          name: size,
          in: query,
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 },
        }
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /applications/{applicationId}:
    parameters:
      - {
        name: applicationId,
        in: path,
        required: true,
        schema: { type: string, format: uuid },
      }

    get:
      tags: [ Applications ]
      summary: Application details
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    patch:
      tags: [ Applications ]
      summary: HR decision/comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateApplicationRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /applications/{applicationId}/messages:
    get:
      tags: [ Applications ]
      summary: HR fetches chat messages
      parameters:
        - {
          name: page,
          in: query,
          schema: { type: integer, minimum: 0, default: 0 },
        }
        - {
          name: size,
          in: query,
          schema: { type: integer, minimum: 1, maximum: 100, default: 100 },
        }
        - {
          name: applicationId,
          in: path,
          required: true,
          schema: { type: string, format: uuid },
        }
      responses:
        "200":
          description: Messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /applications/{applicationId}/chat:
    post:
      tags: [ Chat ]
      summary: Create or fetch chat session
      parameters:
        - {
          name: applicationId,
          in: path,
          required: true,
          schema: { type: string, format: uuid },
        }
      responses:
        "200":
          description: Session info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ---- chat-session messages (external) ----
  /chat/{sessionId}/messages:
    parameters:
      - {
        name: sessionId,
        in: path,
        required: true,
        schema: { type: string, format: uuid },
      }

    post:
      tags: [ Chat ]
      summary: Candidate sends message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendChatMessageRequest"
      responses:
        "200":
          description: AI reply
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

    get:
      tags: [ Chat ]
      summary: Candidate fetches chat history
      parameters:
        - {
          name: page,
          in: query,
          schema: { type: integer, minimum: 0, default: 0 },
        }
        - {
          name: size,
          in: query,
          schema: { type: integer, minimum: 1, maximum: 100, default: 100 },
        }
      responses:
        "200":
          description: History
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  # ========== APPLICATION SERVICE (internal) ==========
  /internal/api/v1/applications/{applicationId}:
    parameters:
      - {
        name: applicationId,
        in: path,
        required: true,
        schema: { type: string, format: uuid },
      }
    get:
      tags: [ Internal-Application ]
      security: [ ]
      summary: Get application + assessment (internal)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"