global:
  # 镜像仓库信息（CI/CD 注入）
  ghcrUser: ""
  ghcrRepo: ""
  imageTag: ""

  # Ingress 通用设置
  ingress:
    enabled: true
    className: nginx
    tls: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

  # 运行环境专属（由 values-dev / prod 覆盖）
  env:
    stage: ""          # dev / prod
    host: ""           # api.ai-hr*.student.k8s.aet.cit.tum.de
    tlsSecret: ""      # ai-hr-*-tls
    # CORS
    corsAllowed: ""          # 由 dev / prod 覆盖
  jwt:
    privateKey: ""           # helm --set-file 注入
    publicKey: ""            # helm --set-file 注入

  # 数据库凭据
  db:
    username: ""
    password: ""

#kube-prometheus-stack:
#  namespaceOverride: ai-hr-monitoring
#  prometheus:
#    prometheusSpec:
#      serviceMonitorSelectorNilUsesHelmValues: false
#      serviceMonitorSelector:
#        matchLabels:
#          release: ai-hr-monitoring

grafana:
  rbac:
    namespaced: true

  adminPassword: ""

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    className: nginx
    hosts: []           # 在 values-dev / prod 覆盖
    tls: []
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          uid: prometheus
          type: prometheus
          url: http://ai-hr-dev-prometheus-server   # ← Helm 会自动生成此 Service
          access: proxy
          isDefault: true

discordWebhook:
  url: ""

prometheus:
  rbac:
    create: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  pushgateway:
    enabled: false
  alertmanager:
    enabled: true
    config:
      global:
        resolve_timeout: 5m
      route:
        receiver: discord
      receivers:
        - name: discord
          webhook_configs:
            - url: http://alertmanager-discord:9094
              send_resolved: true

  server:
    replicaCount: 1
    rbac:
      create: true
    releaseNamespace: true
    serviceAccount:
      create: true
      name: ai-hr-dev-prometheus-server
    persistentVolume:
      enabled: true
      size: 2Gi

  serverFiles:
    alerting_rules.yml:
      groups:
        - name: Instances
          rules:
            - alert: InstanceDown
              expr: up == 0
              for: 1m
              labels:
                severity: page
              annotations:
                description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minutes.'
                summary: 'Instance {{ $labels.instance }} down'
    prometheus.yml:
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090
        - job_name: 'kubernetes-service-endpoints'
          honor_labels: true
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
              action: keep
              regex: true
            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape_slow ]
              action: drop
              regex: true
            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
              action: replace
              target_label: __scheme__
              regex: (https?)
            - source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
              action: replace
              target_label: __address__
              regex: (.+?)(?::\d+)?;(\d+)
              replacement: $1:$2
            - action: labelmap
              regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - source_labels: [ __meta_kubernetes_namespace ]
              action: replace
              target_label: namespace
            - source_labels: [ __meta_kubernetes_service_name ]
              action: replace
              target_label: service
            - source_labels: [ __meta_kubernetes_pod_node_name ]
              action: replace
              target_label: node
        - job_name: 'kubernetes-pods'
          honor_labels: true
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
              action: keep
              regex: true
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow ]
              action: drop
              regex: true
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scheme ]
              action: replace
              regex: (https?)
              target_label: __scheme__
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip ]
              action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$2]:$1'
              target_label: __address__
            - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip ]
              action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $2:$1
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [ __meta_kubernetes_namespace ]
              action: replace
              target_label: namespace
            - source_labels: [ __meta_kubernetes_pod_name ]
              action: replace
              target_label: pod
            - source_labels: [ __meta_kubernetes_pod_phase ]
              regex: Pending|Succeeded|Failed|Completed
              action: drop
            - source_labels: [ __meta_kubernetes_pod_node_name ]
              action: replace
              target_label: node